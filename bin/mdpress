#!/usr/bin/env ruby
require 'fileutils'
require 'yaml'
require 'tempfile'
require 'optparse'

require 'launchy'
require 'redcarpet'

$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)

require 'impress_renderer'

THEMES_DIRNAME = './themes/'

def log(x)
  puts "\033[94m" + x + "\033[0m" if OPTS[:verbose]
end

def base_dir
  File.dirname(__FILE__) + "/../lib/"
end

def list_available_stylesheets
  log "Available stylesheets:"
  log "mdpress stylesheets"
  Dir.glob(base_dir + "impress_css/*.css").each do |file|
    puts File.basename(file, ".css")
  end
  log "Local stylesheets"
  Dir.glob(THEMES_DIRNAME + "*.css").each do |file|
    puts File.basename(file, ".css")
  end
end

def readfile file
  if file =~ /^http/
    require 'open-uri'
  end
  begin
    open(file).read
  rescue Errno::ENOENT => e
    raise "no such file or directory: #{file} (#{e})"
  end
end

def extract_metadata text
  if md = text.match(/\A(---\s*\n.*?\n?)^(---\s*$\n?)/m)
    [md.post_match, YAML.load(md[1])]
  else
    [text, {}]
  end
end

def render opts
  text, metadata = extract_metadata(readfile(FILENAME))

  # ugly hack to get attributes for impress.js
  # TODO make this pretty
  lines = text.split("\n").reject{|l| l=~ /\A!!/ }
  lines.drop_while { |l| l =~ /^$/ }

  defaults = metadata['defaults'] || {}

  attrs = [defaults.dup]

  new_lines = []
  lines.each_with_index do |line, i|
    if line =~ /^=(.*)$/ && (i == 0 || lines[i-1] =~ /^(-\s*){3,}$/)
      line =~ /^=(.*)$/
      attrs[attrs.size-1] = defaults.dup.merge(Hash[$1.split(' ').map{|a| k,v=a.split('=') ; [k, eval(v.to_s)]}])
      next
    elsif line =~ /^(-\s*){3,}$/
      attrs << defaults.dup
    end
    new_lines << line
  end

  text = new_lines.join("\n")

  # now use those attributes and render the file
  ImpressRenderer.new.tap do |mdpress|
    mdpress.dest = DIRNAME
    mdpress.init_with_attrs attrs, opts
    mdpress.author = metadata['author'] if metadata['author']
    mdpress.title  = metadata['title']  if metadata['title']
    mdpress.transition_duration = metadata.fetch('transition-duration', 1000)
    if File.exist?(STYLESHEET_HEAD)
      mdpress.head= File.read(STYLESHEET_HEAD)
    end

    m = Redcarpet::Markdown.new(mdpress, :autolink => true, :fenced_code_blocks => true, :tables => true)
    log "rendering presentation"
    f = File.open(DIRNAME + "/index.html", "w+")
    f.write(m.render(text))
    f.close
  end
end

OPTS = {
  stylesheet: 'default',
  action: :build
}

optparse = OptionParser.new do |opt|
  opt.banner << %q{
Usage: mdpress [filename] [options]
where [options] are:
}
  opt.on('-a', '--automatic', "Keeps running and automatically updates the presentation to reflect changes to markdown file.") do
    OPTS[:automatic] = true
  end
  opt.on('-s', '--stylesheet STYLESHEET',  "Specify what stylesheet to use. (Default: #{OPTS[:stylesheet]}") do |stylesheet|
    OPTS[:stylesheet] = stylesheet
  end
  opt.on('-l', '--list', "List all available stylesheets.") do
    list_available_stylesheets
    exit
  end
  opt.on('-r', '--run', "Run presentation (automatically compiles to a tmp directory and opens in a browser window)") { OPTS[:action] = :run }
  opt.on('-t', '--latex', "Provide Latex support") { OPTS[:latex] = true }
  opt.on('-v', '--verbose', "Be verbose.") { OPTS[:verbose] = true }
  opt.on('-h', '--help', "Display this help message and exit") do
    puts opts
    exit
  end
end.parse!(ARGV)

if ARGV.empty?
  puts optparse
  raise "no file specified"
end

case OPTS[:action]
when :run
  file = ARGV[0]
  tmp = Tempfile.new("mdpress")
  tmp.write(readfile(file))
  tmp.flush
  FILENAME = tmp.path
  DIRNAME = FILENAME + "_dir"
when :build
  FILENAME = ARGV[0]
  DIRNAME = File.basename(FILENAME, File.extname(FILENAME))
end

if File.exist?(THEMES_DIRNAME + "#{OPTS[:stylesheet]}.css")
    STYLESHEET = THEMES_DIRNAME + "#{OPTS[:stylesheet]}.css"
    STYLESHEET_HEAD = THEMES_DIRNAME + "#{OPTS[:stylesheet]}.html"
else
    STYLESHEET = base_dir + "impress_css/#{OPTS[:stylesheet]}.css"
    STYLESHEET_HEAD = base_dir + "impress_css/#{OPTS[:stylesheet]}.html"
end

unless File.exist?(STYLESHEET)
  puts OPTS[:stylesheet] + " is not a valid stylesheet. See available stylesheets with `mdpress -l`."
  exit
end

if File.exist?(DIRNAME)
  unless File.directory?(DIRNAME)
    puts "please delete the file: #{DIRNAME} before continuing."
    exit
  end
else
  log "making directory"
  Dir.mkdir(DIRNAME)
end

render OPTS

log "copying files"
FileUtils.cp_r(base_dir + "js", DIRNAME)
FileUtils.cp_r(base_dir + "css", DIRNAME)
FileUtils.cp(STYLESHEET, DIRNAME + "/css/style.css")

def auto
  while true
    sleep 2
    if FileUtils.uptodate?(FILENAME, [DIRNAME + "/index.html"])
      log "updating from #{FILENAME}"
      render OPTS
    end
    # Takes care of updating stylesheets for local styles.
    if FileUtils.uptodate?(STYLESHEET, [DIRNAME + "/css/style.css"])
      log "updating stylesheet #{STYLESHEET}"
      FileUtils.cp(STYLESHEET, DIRNAME + "/css/style.css")
    end
  end
end

if OPTS[:automatic]
  if ARGV[0] =~ /^http/
    puts "Can't run in auto mode for remote files."
  else
    log "waiting for updates..."
    auto
  end
elsif OPTS[:run]
  log "opening in browser."
  Launchy.open(DIRNAME + "/index.html", :application => :browser)
else
  log "done."
end
